[{"path":[]},{"path":"https://pkg.rossellhayes.com/incase/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://pkg.rossellhayes.com/incase/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://pkg.rossellhayes.com/incase/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://pkg.rossellhayes.com/incase/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://pkg.rossellhayes.com/incase/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://pkg.rossellhayes.com/incase/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://pkg.rossellhayes.com/incase/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://pkg.rossellhayes.com/incase/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://pkg.rossellhayes.com/incase/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://pkg.rossellhayes.com/incase/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://pkg.rossellhayes.com/incase/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://pkg.rossellhayes.com/incase/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Alexander Rossell Hayes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://pkg.rossellhayes.com/incase/LICENSE.html","id":"copying","dir":"","previous_headings":"","what":"Copying","title":"MIT License","text":"incase includes code dplyr, licensed MIT License: Copyright © 2013-2019 RStudio others. Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://pkg.rossellhayes.com/incase/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Rossell Hayes. Author, maintainer, copyright holder. Patrice Kiener. Contributor.            Contributed example fn_case()","code":""},{"path":"https://pkg.rossellhayes.com/incase/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rossell Hayes (2025). incase: Pipe-Friendly Vector Replacement Case Statements. R package version 0.4.0.9000, https://pkg.rossellhayes.com/incase/.","code":"@Manual{,   title = {incase: Pipe-Friendly Vector Replacement with Case Statements},   author = {Alexander {Rossell Hayes}},   year = {2025},   note = {R package version 0.4.0.9000},   url = {https://pkg.rossellhayes.com/incase/}, }"},{"path":"https://pkg.rossellhayes.com/incase/index.html","id":"incase-","dir":"","previous_headings":"","what":"Pipe-Friendly Vector Replacement with Case Statements","title":"Pipe-Friendly Vector Replacement with Case Statements","text":"incase provides pipe-friendly alternative dplyr’s case_when() if_else().","code":""},{"path":"https://pkg.rossellhayes.com/incase/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Pipe-Friendly Vector Replacement with Case Statements","text":"can install released version incase CRAN : development version GitHub :","code":"install.packages(\"incase\") # install.packages(\"pak\") pak::pkg_install(\"rossellhayes/incase\")"},{"path":[]},{"path":"https://pkg.rossellhayes.com/incase/index.html","id":"pipe-friendly-conditionals","dir":"","previous_headings":"Usage","what":"Pipe-friendly conditionals","title":"Pipe-Friendly Vector Replacement with Case Statements","text":"incase’s in_case() if_case() accept vector first input, allowing take full advantage magrittr’s .","code":"1:20 %>%   in_case(     . %% 15 == 0 ~ \"fizz buzz\",     . %%  3 == 0 ~ \"fizz\",     . %%  5 == 0 ~ \"buzz\",     TRUE         ~ .   ) #>  [1] \"1\"         \"2\"         \"fizz\"      \"4\"         \"buzz\"      \"fizz\"      #>  [7] \"7\"         \"8\"         \"fizz\"      \"buzz\"      \"11\"        \"fizz\"      #> [13] \"13\"        \"14\"        \"fizz buzz\" \"16\"        \"17\"        \"fizz\"      #> [19] \"19\"        \"buzz\"  1:20 %>% if_case(. %% 3 == 0, \"fizz\", .) #>  [1] \"1\"    \"2\"    \"fizz\" \"4\"    \"5\"    \"fizz\" \"7\"    \"8\"    \"fizz\" \"10\"   #> [11] \"11\"   \"fizz\" \"13\"   \"14\"   \"fizz\" \"16\"   \"17\"   \"fizz\" \"19\"   \"20\""},{"path":"https://pkg.rossellhayes.com/incase/index.html","id":"automatic-type-conversion","dir":"","previous_headings":"Usage","what":"Automatic type conversion","title":"Pipe-Friendly Vector Replacement with Case Statements","text":"incase functions automatically coerce types. especially useful dealing integers NAs. incase, longer worry specifying type NAs adding L integers.","code":"x <- -1:5  # Replace -1 with NA dplyr::case_when(x == -1 ~ NA, TRUE ~ x) #> [1] NA  0  1  2  3  4  5 dplyr::case_when(x == -1 ~ NA_integer_, TRUE ~ x) #> [1] NA  0  1  2  3  4  5 in_case(x == -1 ~ NA, TRUE ~ x) #> [1] NA  0  1  2  3  4  5  # Replace -1 with 0 dplyr::case_when(x == -1 ~ 0, TRUE ~ x) #> [1] 0 0 1 2 3 4 5 dplyr::case_when(x == -1 ~ 0L, TRUE ~ x) #> [1] 0 0 1 2 3 4 5 in_case(x == -1 ~ 0, TRUE ~ x) #> [1] 0 0 1 2 3 4 5"},{"path":"https://pkg.rossellhayes.com/incase/index.html","id":"easy-default-values","dir":"","previous_headings":"Usage","what":"Easy default values","title":"Pipe-Friendly Vector Replacement with Case Statements","text":"in_case() adds .preserve .default arguments intuitive alternative TRUE ~ ....*","code":"1:20 %>%   in_case(     . %% 15 == 0 ~ \"fizz buzz\",     . %%  3 == 0 ~ \"fizz\",     . %%  5 == 0 ~ \"buzz\"   ) #>  [1] NA          NA          \"fizz\"      NA          \"buzz\"      \"fizz\"      #>  [7] NA          NA          \"fizz\"      \"buzz\"      NA          \"fizz\"      #> [13] NA          NA          \"fizz buzz\" NA          NA          \"fizz\"      #> [19] NA          \"buzz\"  1:20 %>%   in_case(     . %% 15 == 0 ~ \"fizz buzz\",     . %%  3 == 0 ~ \"fizz\",     . %%  5 == 0 ~ \"buzz\",     .preserve    = TRUE   ) #>  [1] \"1\"         \"2\"         \"fizz\"      \"4\"         \"buzz\"      \"fizz\"      #>  [7] \"7\"         \"8\"         \"fizz\"      \"buzz\"      \"11\"        \"fizz\"      #> [13] \"13\"        \"14\"        \"fizz buzz\" \"16\"        \"17\"        \"fizz\"      #> [19] \"19\"        \"buzz\"  1:20 %>%   in_case(     . %% 15 == 0 ~ \"fizz buzz\",     . %%  3 == 0 ~ \"fizz\",     . %%  5 == 0 ~ \"buzz\",     .default     = \"pass\"   ) #>  [1] \"pass\"      \"pass\"      \"fizz\"      \"pass\"      \"buzz\"      \"fizz\"      #>  [7] \"pass\"      \"pass\"      \"fizz\"      \"buzz\"      \"pass\"      \"fizz\"      #> [13] \"pass\"      \"pass\"      \"fizz buzz\" \"pass\"      \"pass\"      \"fizz\"      #> [19] \"pass\"      \"buzz\""},{"path":"https://pkg.rossellhayes.com/incase/index.html","id":"simplified-interface-for-recoding","dir":"","previous_headings":"Usage","what":"Simplified interface for recoding","title":"Pipe-Friendly Vector Replacement with Case Statements","text":"switch_case() works convenient shorthand in_case() recoding discrete values. grep_case() allows recode values pattern matching.","code":"parties #>  [1] \"R\" \"I\" \"R\" \"R\" \"D\" \"G\" \"I\" \"D\" \"G\" \"G\" \"I\" \"D\" NA  \"I\" \"I\" \"R\" NA  \"I\" \"G\" #> [20] \"R\"  parties %>%   switch_case(     \"D\"         ~ \"Democrat\",     \"R\"         ~ \"Republican\",     c(\"G\", \"L\") ~ \"Other\",     c(\"I\", NA)  ~ \"Independent\"   ) #>  [1] \"Republican\"  \"Independent\" \"Republican\"  \"Republican\"  \"Democrat\"    #>  [6] \"Other\"       \"Independent\" \"Democrat\"    \"Other\"       \"Other\"       #> [11] \"Independent\" \"Democrat\"    \"Independent\" \"Independent\" \"Independent\" #> [16] \"Republican\"  \"Independent\" \"Independent\" \"Other\"       \"Republican\" countries <- c(   \"France\", \"Ostdeutschland\", \"Westdeutschland\", \"Nederland\",   \"België (Vlaanderen)\", \"Belgique (Wallonie)\", \"Luxembourg\", \"Italia\" )  grep_case(   countries,   \"Deutschland\" ~ \"Germany\",   \"Belg\"        ~ \"Belgium\",   \"Nederland\"   ~ \"Netherlands\",   \"Italia\"      ~ \"Italy\",   preserve      = TRUE,   ignore.case   = TRUE ) #> [1] \"France\"      \"Germany\"     \"Germany\"     \"Netherlands\" \"Belgium\"     #> [6] \"Belgium\"     \"Luxembourg\"  \"Italy\""},{"path":"https://pkg.rossellhayes.com/incase/index.html","id":"easily-recode-to-ordered-factor","dir":"","previous_headings":"Usage > Simplified interface for recoding","what":"Easily recode to (ordered) factor","title":"Pipe-Friendly Vector Replacement with Case Statements","text":"need ordered factor, *_fct() family functions lets save step using order cases order factor levels. Use .ordered = TRUE create ordered factor .ordered = FALSE make regular-old factor. Hex sticker fonts Source Sans Adobe Hasklig Ian Tuomi. Please note incase released Contributor Code Conduct. contributing project, agree abide terms. * Intuitiveness may vary person person.","code":"data <- runif(10, 0, 10) data #>  [1] 8.4454267 1.6049231 0.5227919 2.3271123 8.1508663 2.2252478 3.8852771 #>  [8] 9.6029983 4.8355979 9.6592282  data %>%    in_case_fct(     . < 3    ~ \"Low\",     . < 7    ~ \"Medium\",     .default = \"High\",     .ordered = TRUE   ) #>  [1] High   Low    Low    Low    High   Low    Medium High   Medium High   #> Levels: Low < Medium < High  parties %>%   switch_case_fct(     \"D\"         ~ \"Democrat\",     \"R\"         ~ \"Republican\",     c(\"G\", \"L\") ~ \"Other\",     c(\"I\", NA)  ~ \"Independent\"   ) #>  [1] Republican  Independent Republican  Republican  Democrat    Other       #>  [7] Independent Democrat    Other       Other       Independent Democrat    #> [13] Independent Independent Independent Republican  Independent Independent #> [19] Other       Republican  #> Levels: Democrat Republican Other Independent"},{"path":"https://pkg.rossellhayes.com/incase/reference/fn_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Case statements applying a function to all inputs — fn_case","title":"Case statements applying a function to all inputs — fn_case","text":"Case statements applying function inputs","code":""},{"path":"https://pkg.rossellhayes.com/incase/reference/fn_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case statements applying a function to all inputs — fn_case","text":"","code":"fn_case(   x,   fn,   ...,   .preserve = FALSE,   .default = NA,   .exhaustive = FALSE,   preserve = deprecated(),   default = deprecated() )"},{"path":"https://pkg.rossellhayes.com/incase/reference/fn_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Case statements applying a function to all inputs — fn_case","text":"x vector fn function apply left-hand side formula ... Either quoted unquoted function name, anonymous function, purrr-style formula. function take two inputs, first x second left-hand side formula. function return logical vector, either length 1 length x. ... <dynamic-dots> sequence two-sided formulas named arguments. Formulas: Elements x return TRUE passed fn left hand side (LHS) formula replaced value right hand side (RHS). LHS must evaluate logical vector passed fn x. RHS must length 1 length RHS. Named arguments: named arguments passed additional arguments function fn. .preserve, preserve TRUE, unmatched elements x returned unmodified. (elements may type coerced compatible replacement values.) FALSE, unmatched elements x replaced .default. Defaults FALSE. .default, default .preserve FALSE, value replace unmatched elements x. Defaults NA. .exhaustive TRUE, unmatched elements x result error. can useful ensure accidentally forgetting recode values. Defaults FALSE. Note .preserve TRUE, .exhaustive never effect.","code":""},{"path":"https://pkg.rossellhayes.com/incase/reference/fn_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Case statements applying a function to all inputs — fn_case","text":"vector length 1 n, matching length logical input output vectors. Inconsistent lengths generate error.","code":""},{"path":[]},{"path":"https://pkg.rossellhayes.com/incase/reference/fn_case.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Case statements applying a function to all inputs — fn_case","text":"","code":"# Replicate switch_case() parties <- sample(c(\"d\", \"r\", \"i\", \"g\", \"l\"), 20, replace = TRUE)  fn_case(   parties,   fn = `%in%`,   \"d\" ~ \"Democrat\",   \"r\" ~ \"Republican\",   \"i\" ~ \"Independent\",   \"g\" ~ \"Green\",   \"l\" ~ \"Libertarian\" ) #>  [1] \"Green\"       \"Libertarian\" \"Green\"       \"Democrat\"    \"Libertarian\" #>  [6] \"Libertarian\" \"Libertarian\" \"Republican\"  \"Independent\" \"Independent\" #> [11] \"Libertarian\" \"Libertarian\" \"Green\"       \"Libertarian\" \"Republican\"  #> [16] \"Green\"       \"Republican\"  \"Independent\" \"Democrat\"    \"Independent\"  # Replicate grep_case() countries <- c(   \"France\", \"Ostdeutschland\", \"Westdeutschland\", \"Nederland\",   \"Belgie (Vlaanderen)\", \"Belgique (Wallonie)\", \"Luxembourg\", \"Italia\" )  fn_case(   countries,   fn = function(x, pattern, ...) {grepl(pattern, x, ...)},   \"Deutschland\" ~ \"Germany\",   \"Belgi(qu)?e\" ~ \"Belgium\",   \"Nederland\"   ~ \"Netherlands\",   \"Italia\"      ~ \"Italy\",   .preserve     = TRUE,   ignore.case   = TRUE ) #> [1] \"France\"      \"Germany\"     \"Germany\"     \"Netherlands\" \"Belgium\"     #> [6] \"Belgium\"     \"Luxembourg\"  \"Italy\"        fn_case(   countries,   fn = ~ grepl(.y, .x),   \"Deutschland\" ~ \"Germany\",   \"Belgi(qu)?e\" ~ \"Belgium\",   \"Nederland\"   ~ \"Netherlands\",   \"Italia\"      ~ \"Italy\",   .preserve     = TRUE,   ignore.case   = TRUE ) #> [1] \"France\"          \"Ostdeutschland\"  \"Westdeutschland\" \"Netherlands\"     #> [5] \"Belgium\"         \"Belgium\"         \"Luxembourg\"      \"Italy\"            # Recode values in a range time    <- runif(10, 1, 12) hours   <- time %/% 1 minutes <- time %% 1 * 60  hours <- hours %>%   if_case(minutes > 32.5, (. + 1) %% 12, .) %>%   switch_case(0 ~ 12, .preserve = TRUE)  minutes %>%   fn_case(     fn = ~ abs(.x - .y) <= 2.5,     0  ~ \"o'clock\",     60 ~ \"o'clock\",     30 ~ \"half past\",     15 ~ \"quarter past\",     45 ~ \"quarter to\",     5  ~ \"five past\",     10 ~ \"ten past\",     20 ~ \"twenty past\",     25 ~ \"twenty-five past\",     55 ~ \"five to\",     50 ~ \"ten to\",     40 ~ \"twenty to\",     35 ~ \"twenty-five to\"   ) %>%   switch_case(     \"o'clock\" ~ paste(hours, .),     .default  = paste(., hours)   ) #>  [1] \"twenty-five past 3\" \"half past 8\"        \"half past 6\"        #>  [4] \"five past 8\"        \"quarter past 8\"     \"five past 2\"        #>  [7] \"twenty-five past 9\" \"half past 9\"        \"five to 12\"         #> [10] \"twenty to 12\"        # Replicate vctrs::vec_ptype_abbr() (used for tibble column labels) # Based on a contribution by Patrice Kiener in_herits <- function(x) {   fn_case(     x,     fn = inherits,     \"factor\"     ~ \"fct\",     \"character\"  ~ \"chr\",     \"numeric\"    ~ \"dbl\",     \"integer\"    ~ \"int\",     \"logical\"    ~ \"lgl\",     \"complex\"    ~ \"cpl\",     \"raw\"        ~ \"raw\",     \"matrix\"     ~ \"mat\",     \"array\"      ~ \"arr\",     \"data.frame\" ~ \"df\",     \"list\"       ~ \"lst\",     \"function\"   ~ \"fn\",     .default     = class(x)[[1]]   ) }  in_herits(1:3) #> [1] \"int\" in_herits(letters[1:3]) #> [1] \"chr\" in_herits(fn_case) #> [1] \"fn\""},{"path":"https://pkg.rossellhayes.com/incase/reference/grep_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch-style recoding of values with string pattern matching — grep_case","title":"Switch-style recoding of values with string pattern matching — grep_case","text":"Switch-style recoding values string pattern matching","code":""},{"path":"https://pkg.rossellhayes.com/incase/reference/grep_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch-style recoding of values with string pattern matching — grep_case","text":"","code":"grep_case(   x,   ...,   .preserve = FALSE,   .default = NA,   .exhaustive = FALSE,   preserve = deprecated(),   default = deprecated() )"},{"path":"https://pkg.rossellhayes.com/incase/reference/grep_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch-style recoding of values with string pattern matching — grep_case","text":"x vector ... <dynamic-dots> sequence two-sided formulas named arguments. Formulas: Elements x match regex pattern left hand side (LHS) formulas replaced value right hand side (RHS). LHS must evaluate character string. RHS must length one. NULL inputs ignored. Named arguments: named arguments passed grepl(). .preserve, preserve TRUE, unmatched elements x returned unmodified. (elements may type coerced compatible replacement values.) FALSE, unmatched elements x replaced .default. Defaults FALSE. .default, default .preserve FALSE, value replace unmatched elements x. Defaults NA. .exhaustive TRUE, unmatched elements x result error. can useful ensure accidentally forgetting recode values. Defaults FALSE. Note .preserve TRUE, .exhaustive never effect.","code":""},{"path":"https://pkg.rossellhayes.com/incase/reference/grep_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Switch-style recoding of values with string pattern matching — grep_case","text":"vector length x.","code":""},{"path":[]},{"path":"https://pkg.rossellhayes.com/incase/reference/grep_case.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Switch-style recoding of values with string pattern matching — grep_case","text":"","code":"words <- c(\"caterpillar\", \"dogwood\", \"catastrophe\", \"dogma\")  grep_case(   words,   \"cat\" ~ \"feline\",   \"dog\" ~ \"canine\" ) #> [1] \"feline\" \"canine\" \"feline\" \"canine\"  caps_words <- c(\"caterpillar\", \"dogwood\", \"Catastrophe\", \"DOGMA\")  grep_case(   caps_words,   \"cat\" ~ \"feline\",   \"dog\" ~ \"canine\",   ignore.case = TRUE ) #> [1] \"feline\" \"canine\" \"feline\" \"canine\"  countries <- c(   \"France\", \"Ostdeutschland\", \"Westdeutschland\", \"Nederland\",   \"Belgie (Vlaanderen)\", \"Belgique (Wallonie)\", \"Luxembourg\", \"Italia\" )  grep_case(   countries,   \"Deutschland\" ~ \"Germany\",   \"Belgi(qu)?e\" ~ \"Belgium\",   \"Nederland\"   ~ \"Netherlands\",   \"Italia\"      ~ \"Italy\",   .preserve     = TRUE,   ignore.case   = TRUE ) #> [1] \"France\"      \"Germany\"     \"Germany\"     \"Netherlands\" \"Belgium\"     #> [6] \"Belgium\"     \"Luxembourg\"  \"Italy\""},{"path":"https://pkg.rossellhayes.com/incase/reference/if_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe-friendly vectorized if — if_case","title":"Pipe-friendly vectorized if — if_case","text":"Compared dplyr::if_else(), function easier use pipe. vector piped function quietly ignored. allows magrittr dots used arguments without requiring workarounds like wrapping function braces.","code":""},{"path":"https://pkg.rossellhayes.com/incase/reference/if_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe-friendly vectorized if — if_case","text":"","code":"if_case(condition, true, false, missing = NA, ...)"},{"path":"https://pkg.rossellhayes.com/incase/reference/if_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe-friendly vectorized if — if_case","text":"condition Logical vector true, false, missing Values use TRUE, FALSE, NA values condition. must either length condition, length 1. ... Values passed ... produce error. facilitates quiet ignoring piped vector.","code":""},{"path":"https://pkg.rossellhayes.com/incase/reference/if_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe-friendly vectorized if — if_case","text":"condition TRUE, matching value true; FALSE, matching value false; NA, matching value missing.","code":""},{"path":"https://pkg.rossellhayes.com/incase/reference/if_case.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pipe-friendly vectorized if — if_case","text":"function also less strict dplyr::if_else(). true, false, missing different types, silently coerced common type.","code":""},{"path":[]},{"path":"https://pkg.rossellhayes.com/incase/reference/if_case.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipe-friendly vectorized if — if_case","text":"","code":"x <- c(1, 2, 5, NA)  # if_case() produces the same output as dplyr::if_else() if_case(x > 3, \"high\", \"low\", \"missing\") #> [1] \"low\"     \"low\"     \"high\"    \"missing\" dplyr::if_else(x > 3, \"high\", \"low\", \"missing\") #> [1] \"low\"     \"low\"     \"high\"    \"missing\"  # if_case() does not throw an error if arguments are not of the same type if_case(x > 3, \"high\", \"low\", NA) #> [1] \"low\"  \"low\"  \"high\" NA     try(dplyr::if_else(x > 3, \"high\", \"low\", NA)) #> [1] \"low\"  \"low\"  \"high\" NA      # if_case() can accept a piped input without an error or requiring braces x %>% if_case(. > 3, \"high\", \"low\", \"missing\") #> [1] \"low\"     \"low\"     \"high\"    \"missing\" try(x %>% dplyr::if_else(. > 3, \"high\", \"low\", \"missing\")) #> Error in dplyr::if_else(., . > 3, \"high\", \"low\", \"missing\") :  #>   `...` must be empty. #> ✖ Problematic argument: #> • ..1 = \"missing\" #> ℹ Did you forget to name an argument? x %>% {dplyr::if_else(. > 3, \"high\", \"low\", \"missing\")} #> [1] \"low\"     \"low\"     \"high\"    \"missing\"  # You can also pipe a conditional test like dplyr::if_else() {x > 3} %>% if_case(\"high\", \"low\", \"missing\") #> [1] \"low\"     \"low\"     \"high\"    \"missing\" {x > 3} %>% dplyr::if_else(\"high\", \"low\", \"missing\") #> [1] \"low\"     \"low\"     \"high\"    \"missing\""},{"path":"https://pkg.rossellhayes.com/incase/reference/in_case.html","id":null,"dir":"Reference","previous_headings":"","what":"A pipe-friendly general vectorized if — in_case","title":"A pipe-friendly general vectorized if — in_case","text":"function allows vectorize multiple if_else() statements. cases match, NA returned. function derived dplyr::case_when(). Unlike dplyr::case_when(), in_case() supports piping elegantly attempts handle inconsistent types (see examples).","code":""},{"path":"https://pkg.rossellhayes.com/incase/reference/in_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A pipe-friendly general vectorized if — in_case","text":"","code":"in_case(   ...,   .preserve = FALSE,   .default = NA,   preserve = deprecated(),   default = deprecated() )"},{"path":"https://pkg.rossellhayes.com/incase/reference/in_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A pipe-friendly general vectorized if — in_case","text":"... <dynamic-dots> sequence two-sided formulas. left hand side (LHS) determines values match case. right hand side (RHS) provides replacement value. LHS must evaluate logical vector. LHS RHS may length either 1 n. value n must consistent across cases. case n == 0 treated variant n != 1. NULL inputs ignored. .preserve TRUE, unmatched elements input returned unmodified. (elements may type coerced compatible replacement values.) FALSE, unmatched elements input replaced .default. Defaults FALSE. .default .preserve FALSE, value replace unmatched elements input. Defaults NA. preserve, default Deprecated favor .preserve .default","code":""},{"path":"https://pkg.rossellhayes.com/incase/reference/in_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A pipe-friendly general vectorized if — in_case","text":"vector length 1 n, matching length logical input output vectors. Inconsistent lengths generate error.","code":""},{"path":[]},{"path":"https://pkg.rossellhayes.com/incase/reference/in_case.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A pipe-friendly general vectorized if — in_case","text":"","code":"# Non-piped statements are handled the same as dplyr::case_when() x <- 1:30 in_case(   x %% 15 == 0 ~ \"fizz buzz\",   x %%  3 == 0 ~ \"fizz\",   x %%  5 == 0 ~ \"buzz\",   TRUE         ~ x ) #>  [1] \"1\"         \"2\"         \"fizz\"      \"4\"         \"buzz\"      \"fizz\"      #>  [7] \"7\"         \"8\"         \"fizz\"      \"buzz\"      \"11\"        \"fizz\"      #> [13] \"13\"        \"14\"        \"fizz buzz\" \"16\"        \"17\"        \"fizz\"      #> [19] \"19\"        \"buzz\"      \"fizz\"      \"22\"        \"23\"        \"fizz\"      #> [25] \"buzz\"      \"26\"        \"fizz\"      \"28\"        \"29\"        \"fizz buzz\"  # A vector can be directly piped into in_case() without error 1:30 %>%   in_case(     . %% 15 == 0 ~ \"fizz buzz\",     . %%  3 == 0 ~ \"fizz\",     . %%  5 == 0 ~ \"buzz\",     TRUE         ~ .   ) #>  [1] \"1\"         \"2\"         \"fizz\"      \"4\"         \"buzz\"      \"fizz\"      #>  [7] \"7\"         \"8\"         \"fizz\"      \"buzz\"      \"11\"        \"fizz\"      #> [13] \"13\"        \"14\"        \"fizz buzz\" \"16\"        \"17\"        \"fizz\"      #> [19] \"19\"        \"buzz\"      \"fizz\"      \"22\"        \"23\"        \"fizz\"      #> [25] \"buzz\"      \"26\"        \"fizz\"      \"28\"        \"29\"        \"fizz buzz\"  # in_case() silently converts types 1:30 %>%   in_case(     . %% 15 == 0 ~ 35,     . %%  3 == 0 ~ 5,     . %%  5 == 0 ~ 7,     TRUE         ~ NA   ) #>  [1] NA NA  5 NA  7  5 NA NA  5  7 NA  5 NA NA 35 NA NA  5 NA  7  5 NA NA  5  7 #> [26] NA  5 NA NA 35  x <- 1:30 try(   dplyr::case_when(     x %% 15 == 0 ~ 35,     x %%  3 == 0 ~ 5,     x %%  5 == 0 ~ 7,     TRUE         ~ NA   ) ) #>  [1] NA NA  5 NA  7  5 NA NA  5  7 NA  5 NA NA 35 NA NA  5 NA  7  5 NA NA  5  7 #> [26] NA  5 NA NA 35  # .default and .preserve make it easier to handle unmatched values 1:30 %>%   in_case(     . %% 15 == 0 ~ \"fizz buzz\",     . %%  3 == 0 ~ \"fizz\",     . %%  5 == 0 ~ \"buzz\",     .default     = \"pass\"   ) #>  [1] \"pass\"      \"pass\"      \"fizz\"      \"pass\"      \"buzz\"      \"fizz\"      #>  [7] \"pass\"      \"pass\"      \"fizz\"      \"buzz\"      \"pass\"      \"fizz\"      #> [13] \"pass\"      \"pass\"      \"fizz buzz\" \"pass\"      \"pass\"      \"fizz\"      #> [19] \"pass\"      \"buzz\"      \"fizz\"      \"pass\"      \"pass\"      \"fizz\"      #> [25] \"buzz\"      \"pass\"      \"fizz\"      \"pass\"      \"pass\"      \"fizz buzz\"  1:30 %>%   in_case(     . %% 15 == 0 ~ \"fizz buzz\",     . %%  3 == 0 ~ \"fizz\",     . %%  5 == 0 ~ \"buzz\",     .preserve    = TRUE   ) #>  [1] \"1\"         \"2\"         \"fizz\"      \"4\"         \"buzz\"      \"fizz\"      #>  [7] \"7\"         \"8\"         \"fizz\"      \"buzz\"      \"11\"        \"fizz\"      #> [13] \"13\"        \"14\"        \"fizz buzz\" \"16\"        \"17\"        \"fizz\"      #> [19] \"19\"        \"buzz\"      \"fizz\"      \"22\"        \"23\"        \"fizz\"      #> [25] \"buzz\"      \"26\"        \"fizz\"      \"28\"        \"29\"        \"fizz buzz\""},{"path":"https://pkg.rossellhayes.com/incase/reference/in_case_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"Case statements returning a factor — in_case_fct","title":"Case statements returning a factor — in_case_fct","text":"functions equivalent in_case(), switch_case(), grep_case(), fn_case(), fn_switch_case() return factors levels determined order case statements.","code":""},{"path":"https://pkg.rossellhayes.com/incase/reference/in_case_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case statements returning a factor — in_case_fct","text":"","code":"in_case_fct(   ...,   .preserve = FALSE,   .default = NA,   .ordered = FALSE,   preserve = deprecated(),   default = deprecated(),   ordered = deprecated() )  switch_case_fct(   x,   ...,   .preserve = FALSE,   .default = NA,   .ordered = FALSE,   .exhaustive = FALSE,   preserve = deprecated(),   default = deprecated(),   ordered = deprecated() )  grep_case_fct(   x,   ...,   .preserve = FALSE,   .default = NA,   .ordered = FALSE,   .exhaustive = FALSE,   preserve = deprecated(),   default = deprecated(),   ordered = deprecated() )  fn_case_fct(   x,   fn,   ...,   .preserve = FALSE,   .default = NA,   .ordered = FALSE,   .exhaustive = FALSE,   preserve = deprecated(),   default = deprecated(),   ordered = deprecated() )  fn_switch_case_fct(   x,   fn,   ...,   .preserve = FALSE,   .default = NA,   .ordered = FALSE,   .exhaustive = FALSE,   preserve = deprecated(),   default = deprecated(),   ordered = deprecated() )"},{"path":"https://pkg.rossellhayes.com/incase/reference/in_case_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Case statements returning a factor — in_case_fct","text":"... <dynamic-dots> sequence two-sided formulas named arguments. Formulas: Elements x return TRUE passed fn left hand side (LHS) formula replaced value right hand side (RHS). LHS must evaluate logical vector passed fn x. RHS must length 1 length RHS. Named arguments: named arguments passed additional arguments function fn. .preserve TRUE, unmatched elements x returned unmodified. (elements may type coerced compatible replacement values.) FALSE, unmatched elements x replaced .default. Defaults FALSE. .default .preserve FALSE, value replace unmatched elements x. Defaults NA. .ordered logical. TRUE, returns ordered factor. FALSE, returns unordered factor. preserve, default, ordered Deprecated favor .preserve, .default, .ordered x vector .exhaustive TRUE, unmatched elements x result error. can useful ensure accidentally forgetting recode values. Defaults FALSE. Note .preserve TRUE, .exhaustive never effect. fn function apply left-hand side formula ... Either quoted unquoted function name, anonymous function, purrr-style formula. function take two inputs, first x second left-hand side formula. function return logical vector, either length 1 length x.","code":""},{"path":"https://pkg.rossellhayes.com/incase/reference/in_case_fct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Case statements returning a factor — in_case_fct","text":"factor vector length 1 n, matching length logical input output vectors. Levels determined order inputs ... .default. Inconsistent lengths generate error. position .default argument taken account setting factor levels *_case_fct() functions. example, .default argument given case statements, default value first level factor; .default argument positioned two case statements, default value ordered value two case statements.","code":""},{"path":[]},{"path":"https://pkg.rossellhayes.com/incase/reference/in_case_fct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Case statements returning a factor — in_case_fct","text":"","code":"1:10 %>%   in_case_fct(     . %% 2 == 0 ~ \"even\",     . %% 2 == 1 ~ \"odd\"   ) #>  [1] odd  even odd  even odd  even odd  even odd  even #> Levels: even odd  switch_case_fct(   c(\"a\", \"b\", \"c\"),   \"c\" ~ \"cantaloupe\",   \"b\" ~ \"banana\",   \"a\" ~ \"apple\" ) #> [1] apple      banana     cantaloupe #> Levels: cantaloupe banana apple  switch_case_fct(   c(\"a\", \"b\", \"c\", \"d\"),   \"c\" ~ \"cantaloupe\",   \"b\" ~ \"banana\",   \"a\" ~ \"apple\" ) #> [1] apple      banana     cantaloupe <NA>       #> Levels: cantaloupe banana apple  switch_case_fct(   c(\"a\", \"b\", \"c\", \"d\"),   \"c\" ~ \"cantaloupe\",   \"b\" ~ \"banana\",   \"a\" ~ \"apple\",   .preserve = TRUE ) #> [1] apple      banana     cantaloupe d          #> Levels: cantaloupe banana apple d  switch_case_fct(   c(\"a\", \"b\", \"c\", \"d\"),   \"c\" ~ \"cantaloupe\",   \"b\" ~ \"banana\",   \"a\" ~ \"apple\",   .default = \"other\" ) #> [1] apple      banana     cantaloupe other      #> Levels: cantaloupe banana apple other  switch_case_fct(   c(\"a\", \"b\", \"c\", \"d\"),   .default = \"other\",   \"c\" ~ \"cantaloupe\",   \"b\" ~ \"banana\",   \"a\" ~ \"apple\" ) #> [1] apple      banana     cantaloupe other      #> Levels: other cantaloupe banana apple  switch_case_fct(   c(\"a\", \"b\", \"c\", \"d\"),   \"c\" ~ \"cantaloupe\",   \"b\" ~ \"banana\",   .default = \"other\",   \"a\" ~ \"apple\" ) #> [1] apple      banana     cantaloupe other      #> Levels: cantaloupe banana other apple  grep_case_fct(   c(\"caterpillar\", \"dogwood\", \"catastrophe\", \"dogma\"),   \"cat\" ~ \"feline\",   \"dog\" ~ \"canine\" ) #> [1] feline canine feline canine #> Levels: feline canine  fn_case_fct(   c(\"a\", \"b\", \"c\"),   `%in%`,   \"c\" ~ \"cantaloupe\",   \"b\" ~ \"banana\",   \"a\" ~ \"apple\" ) #> [1] apple      banana     cantaloupe #> Levels: cantaloupe banana apple"},{"path":"https://pkg.rossellhayes.com/incase/reference/in_case_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Case statements returning a list — in_case_list","title":"Case statements returning a list — in_case_list","text":"functions equivalent in_case(), switch_case(), grep_case(), fn_case(), fn_switch_case() return lists.","code":""},{"path":"https://pkg.rossellhayes.com/incase/reference/in_case_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case statements returning a list — in_case_list","text":"","code":"in_case_list(   ...,   .preserve = FALSE,   .default = NA,   preserve = deprecated(),   default = deprecated() )  switch_case_list(   x,   ...,   .preserve = FALSE,   .default = NA,   .exhaustive = FALSE,   preserve = deprecated(),   default = deprecated() )  grep_case_list(   x,   ...,   .preserve = FALSE,   .default = NA,   .exhaustive = FALSE,   preserve = deprecated(),   default = deprecated() )  fn_case_list(   x,   fn,   ...,   .preserve = FALSE,   .default = NA,   .exhaustive = FALSE,   preserve = deprecated(),   default = deprecated() )  fn_switch_case_list(   x,   fn,   ...,   .preserve = FALSE,   .default = NA,   .exhaustive = FALSE,   preserve = deprecated(),   default = deprecated() )"},{"path":"https://pkg.rossellhayes.com/incase/reference/in_case_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Case statements returning a list — in_case_list","text":"... <dynamic-dots> sequence two-sided formulas named arguments. Formulas: Elements x return TRUE passed fn left hand side (LHS) formula replaced value right hand side (RHS). LHS must evaluate logical vector passed fn x. RHS must length 1 length RHS. Named arguments: named arguments passed additional arguments function fn. .preserve, preserve TRUE, unmatched elements x returned unmodified. (elements may type coerced compatible replacement values.) FALSE, unmatched elements x replaced .default. Defaults FALSE. .default, default .preserve FALSE, value replace unmatched elements x. Defaults NA. x vector .exhaustive TRUE, unmatched elements x result error. can useful ensure accidentally forgetting recode values. Defaults FALSE. Note .preserve TRUE, .exhaustive never effect. fn function apply left-hand side formula ... Either quoted unquoted function name, anonymous function, purrr-style formula. function take two inputs, first x second left-hand side formula. function return logical vector, either length 1 length x.","code":""},{"path":"https://pkg.rossellhayes.com/incase/reference/in_case_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Case statements returning a list — in_case_list","text":"list length 1 n, matching length logical input vector.","code":""},{"path":"https://pkg.rossellhayes.com/incase/reference/in_case_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Case statements returning a list — in_case_list","text":"can useful returning non-atomic value /want create list column inside tibble.","code":""},{"path":[]},{"path":"https://pkg.rossellhayes.com/incase/reference/in_case_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Case statements returning a list — in_case_list","text":"","code":"1:3 %>%   in_case_list(     . < 2    ~ mtcars,     .default = letters   ) #> [[1]] #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #>  #> [[2]] #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" #>  #> [[3]] #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" #>"},{"path":"https://pkg.rossellhayes.com/incase/reference/incase-package.html","id":null,"dir":"Reference","previous_headings":"","what":"incase: Pipe-Friendly Vector Replacement with Case Statements — incase-package","title":"incase: Pipe-Friendly Vector Replacement with Case Statements — incase-package","text":"Offers pipe-friendly alternative dplyr::case_when() dplyr::if_else(). functions accept vector optional first argument, allowing conditional statements built using magrittr dot operator. functions also coerce possible outputs type, meaning longer worry using specific typed variants NA explicitly declaring integer outputs.","code":""},{"path":"https://pkg.rossellhayes.com/incase/reference/incase-package.html","id":"copyright","dir":"Reference","previous_headings":"","what":"Copyright","title":"incase: Pipe-Friendly Vector Replacement with Case Statements — incase-package","text":"incase includes code dplyr, licensed MIT License: Copyright (c) 2013-2019 RStudio others. Permission hereby granted, free charge, person obtaining copy software associated documentation files (\"Software\"), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED \"\", WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://pkg.rossellhayes.com/incase/reference/incase-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"incase: Pipe-Friendly Vector Replacement with Case Statements — incase-package","text":"Maintainer: Alexander Rossell Hayes alexander@rossellhayes.com (ORCID) [copyright holder] contributors: Patrice Kiener fattailsr@inmodelia.com (ORCID) (Contributed example fn_case()) [contributor]","code":""},{"path":"https://pkg.rossellhayes.com/incase/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://pkg.rossellhayes.com/incase/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://pkg.rossellhayes.com/incase/reference/switch_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch-style recoding of values — switch_case","title":"Switch-style recoding of values — switch_case","text":"Switch-style recoding values","code":""},{"path":"https://pkg.rossellhayes.com/incase/reference/switch_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch-style recoding of values — switch_case","text":"","code":"switch_case(   x,   ...,   .preserve = FALSE,   .default = NA,   .exhaustive = FALSE,   preserve = deprecated(),   default = deprecated() )  fn_switch_case(   x,   fn,   ...,   .preserve = FALSE,   .default = NA,   .exhaustive = FALSE,   preserve = deprecated(),   default = deprecated() )"},{"path":"https://pkg.rossellhayes.com/incase/reference/switch_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch-style recoding of values — switch_case","text":"x vector ... <dynamic-dots> sequence two-sided formulas named arguments. Formulas: Elements x match left hand side (LHS) formulas replaced value right hand side (RHS). LHS must evaluate atomic vector. RHS must length one. NULL inputs ignored. Named arguments: fn_switch_case(), named arguments passed function fn. switch_case(), named arguments raise error. .preserve TRUE, unmatched elements x returned unmodified. (elements may type coerced compatible replacement values.) FALSE, unmatched elements x replaced .default. Defaults FALSE. .default .preserve FALSE, value replace unmatched elements x. Defaults NA. .exhaustive TRUE, unmatched elements x result error. can useful ensure accidentally forgetting recode values. Defaults FALSE. Note .preserve TRUE, .exhaustive never effect. preserve, default Deprecated favor .preserve .default fn function apply left-hand side formula ...","code":""},{"path":"https://pkg.rossellhayes.com/incase/reference/switch_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Switch-style recoding of values — switch_case","text":"vector length x.","code":""},{"path":[]},{"path":"https://pkg.rossellhayes.com/incase/reference/switch_case.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Switch-style recoding of values — switch_case","text":"","code":"parties <- sample(c(\"d\", \"r\", \"i\", \"g\", \"l\"), 20, replace = TRUE)  switch_case(   parties,   \"d\" ~ \"Democrat\",   \"r\" ~ \"Republican\",   \"i\" ~ \"Independent\",   \"g\" ~ \"Green\",   \"l\" ~ \"Libertarian\" ) #>  [1] \"Democrat\"    \"Republican\"  \"Libertarian\" \"Democrat\"    \"Green\"       #>  [6] \"Independent\" \"Green\"       \"Green\"       \"Independent\" \"Republican\"  #> [11] \"Independent\" \"Republican\"  \"Republican\"  \"Independent\" \"Green\"       #> [16] \"Republican\"  \"Democrat\"    \"Independent\" \"Democrat\"    \"Republican\"   parties %>%   switch_case(     \"d\" ~ \"Democrat\",     \"r\" ~ \"Republican\",     \"i\" ~ \"Independent\",     \"g\" ~ \"Green\",     \"l\" ~ \"Libertarian\"   ) #>  [1] \"Democrat\"    \"Republican\"  \"Libertarian\" \"Democrat\"    \"Green\"       #>  [6] \"Independent\" \"Green\"       \"Green\"       \"Independent\" \"Republican\"  #> [11] \"Independent\" \"Republican\"  \"Republican\"  \"Independent\" \"Green\"       #> [16] \"Republican\"  \"Democrat\"    \"Independent\" \"Democrat\"    \"Republican\"   parties %>%   switch_case(     \"d\" ~ \"Democrat\",     \"r\" ~ \"Republican\",     c(\"i\", \"g\", \"l\") ~ \"Other\"   ) #>  [1] \"Democrat\"   \"Republican\" \"Other\"      \"Democrat\"   \"Other\"      #>  [6] \"Other\"      \"Other\"      \"Other\"      \"Other\"      \"Republican\" #> [11] \"Other\"      \"Republican\" \"Republican\" \"Other\"      \"Other\"      #> [16] \"Republican\" \"Democrat\"   \"Other\"      \"Democrat\"   \"Republican\"  parties %>%   switch_case(     \"d\" ~ \"Democrat\",     \"r\" ~ \"Republican\",     .default = \"Other\"   ) #>  [1] \"Democrat\"   \"Republican\" \"Other\"      \"Democrat\"   \"Other\"      #>  [6] \"Other\"      \"Other\"      \"Other\"      \"Other\"      \"Republican\" #> [11] \"Other\"      \"Republican\" \"Republican\" \"Other\"      \"Other\"      #> [16] \"Republican\" \"Democrat\"   \"Other\"      \"Democrat\"   \"Republican\"  parties %>%   switch_case(     \"d\" ~ \"Democrat\",     \"r\" ~ \"Republican\",     .preserve = FALSE   ) #>  [1] \"Democrat\"   \"Republican\" NA           \"Democrat\"   NA           #>  [6] NA           NA           NA           NA           \"Republican\" #> [11] NA           \"Republican\" \"Republican\" NA           NA           #> [16] \"Republican\" \"Democrat\"   NA           \"Democrat\"   \"Republican\"  parties %>%   switch_case(     \"d\" ~ \"Democrat\",     \"r\" ~ \"Republican\",     .preserve = TRUE   ) #>  [1] \"Democrat\"   \"Republican\" \"l\"          \"Democrat\"   \"g\"          #>  [6] \"i\"          \"g\"          \"g\"          \"i\"          \"Republican\" #> [11] \"i\"          \"Republican\" \"Republican\" \"i\"          \"g\"          #> [16] \"Republican\" \"Democrat\"   \"i\"          \"Democrat\"   \"Republican\"  data <- c(1, 4, 8, 12, 999, 6, 2, 888, 4, 6, 777)  fn_switch_case(   data,   function(x) paste(rep(x, 3), collapse = \"\"),   7 ~ \"Not asked\",   8 ~ \"Refused\",   9 ~ \"Missing\",   .preserve = TRUE ) #>  [1] \"1\"         \"4\"         \"8\"         \"12\"        \"Missing\"   \"6\"         #>  [7] \"2\"         \"Refused\"   \"4\"         \"6\"         \"Not asked\""},{"path":"https://pkg.rossellhayes.com/incase/news/index.html","id":"incase-development-version","dir":"Changelog","previous_headings":"","what":"incase (development version)","title":"incase (development version)","text":"Improve formatting error messages .exhaustive TRUE.","code":""},{"path":"https://pkg.rossellhayes.com/incase/news/index.html","id":"incase-040","dir":"Changelog","previous_headings":"","what":"incase 0.4.0","title":"incase 0.4.0","text":"CRAN release: 2025-07-24 Using undotted arguments now trigger warning. future versions, arguments removed. .exhaustive TRUE, function throw error elements input matched case statements. can useful ensure aren’t accidentally forgetting recode values. e.g. .default argument given case statements, default value first level factor; .default argument positioned two case statements, default value ordered value two case statements. grep_case() grep_case_fct() now support vectors left-hand side arguments (#8). *_case() functions can now use lists return values (#7). *_case() functions longer perform automatic type conversion non-atomic return values (#7).","code":""},{"path":"https://pkg.rossellhayes.com/incase/news/index.html","id":"incase-032","dir":"Changelog","previous_headings":"","what":"incase 0.3.2","title":"incase 0.3.2","text":"CRAN release: 2023-08-21 Accept named arguments without preceding dots, e.g. default .default (#5). Take default account determining class output (#5). Fix bug replacement fail condition evaluated vector made NAs FALSEs TRUEs. Improve error messages (#5). longer rely deprecated plu functions (#4).","code":""},{"path":"https://pkg.rossellhayes.com/incase/news/index.html","id":"incase-031","dir":"Changelog","previous_headings":"","what":"incase 0.3.1","title":"incase 0.3.1","text":"CRAN release: 2021-06-06 Fixed bug *_case() return NULL conditions TRUE. Added tibble suggested packages.","code":""},{"path":"https://pkg.rossellhayes.com/incase/news/index.html","id":"incase-030","dir":"Changelog","previous_headings":"","what":"incase 0.3.0","title":"incase 0.3.0","text":"CRAN release: 2021-04-03","code":""},{"path":"https://pkg.rossellhayes.com/incase/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"incase 0.3.0","text":"work *_case() equivalents, return factors Factor levels determined order case statements. in_case_fct(x < 10 ~ \"Low\", x < 20 ~ \"Medium\", default = \"High\") returns factor levels \"Low\", \"Medium\", \"High\". work *_case() equivalents, return lists allows functions return complex data types otherwise broken automatic type conversion. However, RHS still evaluated inputs input TRUE. condition if_case() never takes one three logical values, corresponding output evaluated.","code":""},{"path":"https://pkg.rossellhayes.com/incase/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"incase 0.3.0","text":"if_case() longer produces error condition NA.","code":""},{"path":"https://pkg.rossellhayes.com/incase/news/index.html","id":"incase-021","dir":"Changelog","previous_headings":"","what":"incase 0.2.1","title":"incase 0.2.1","text":"CRAN release: 2021-01-14 Fixed NOTE removing unnecessary import stats. Uses latest version plu informative error messages.","code":""},{"path":"https://pkg.rossellhayes.com/incase/news/index.html","id":"incase-020","dir":"Changelog","previous_headings":"","what":"incase 0.2.0","title":"incase 0.2.0","text":"CRAN release: 2020-12-17 Added grep_case() works similarly switch_case() uses pattern matching instead exact matching. Added fn_case() applies function input formula’s left-hand side create logical vectors used in_case(). Added fn_switch_case() applies function left-hand side formula create vectors used switch_case().","code":""},{"path":"https://pkg.rossellhayes.com/incase/news/index.html","id":"incase-010","dir":"Changelog","previous_headings":"","what":"incase 0.1.0","title":"incase 0.1.0","text":"CRAN release: 2020-09-15 Initial CRAN release.","code":""}]
