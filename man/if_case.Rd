% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/if_case.R
\name{if_case}
\alias{if_case}
\title{Pipe-friendly vectorized if}
\usage{
if_case(condition, true, false, missing = NA, ...)
}
\arguments{
\item{condition}{Logical vector}

\item{true, false, missing}{Values to use for `TRUE`, `FALSE`, and `NA` values
of `condition`.
They must be either the same length as `condition`, or length 1.}

\item{...}{Values passed to `...` produce an error.
This facilitates the quiet ignoring of a piped vector.}
}
\value{
Where `condition` is `TRUE`, the matching value from `true`;
  where it's `FALSE`, the matching value from `false`;
  and where it's `NA`, the matching value from `missing`.
}
\description{
Compared to [dplyr::if_else()], this function is easier to use with a pipe.
A vector piped into this function will be quietly ignored.
This allows [magrittr] dots to be used in arguments without requiring
workarounds like wrapping the function in braces.
}
\details{
This function is also less strict than [dplyr::if_else()].
If `true`, `false`, and `missing` are different types, they are silently
coerced to a common type.
}
\examples{
x <- c(1, 2, 5, NA)

# if_case() produces the same output as dplyr::if_else()
if_case(x > 3, "high", "low", "missing")
dplyr::if_else(x > 3, "high", "low", "missing")

# if_case() does not throw an error if arguments are not of the same type
if_case(x > 3, "high", "low", NA)
\dontrun{dplyr::if_else(x > 3, "high", "low", NA)}

# if_case() can accept a piped input without an error or requiring braces
x \%>\% if_case(. > 3, "high", "low", "missing")
\dontrun{x \%>\% dplyr::if_else(. > 3, "high", "low", "missing")}
x \%>\% {dplyr::if_else(. > 3, "high", "low", "missing")}

# You can also pipe a conditional test instead of a vector
{x > 3} \%>\% if_case("high", "low", "missing")
}
\seealso{
[in_case()], a pipeable alternative to [dplyr::case_when()]

  [switch_case()], a reimplementation of [switch()]

  [dplyr::if_else()], from which this function is derived
}
